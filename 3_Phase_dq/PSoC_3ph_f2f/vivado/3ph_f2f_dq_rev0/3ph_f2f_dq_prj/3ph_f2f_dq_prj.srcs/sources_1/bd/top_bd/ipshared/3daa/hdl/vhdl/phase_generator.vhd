-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity phase_generator is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    b_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    c_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of phase_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "phase_generator,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=7,HLS_SYN_DSP=3,HLS_SYN_FF=1155,HLS_SYN_LUT=931}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_AAA : STD_LOGIC_VECTOR (11 downto 0) := "101010101010";
    constant ap_const_lv12_555 : STD_LOGIC_VECTOR (11 downto 0) := "010101010101";
    constant ap_const_lv13_400 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal theta_V_1_ack_in : STD_LOGIC;
    signal a_V_1_ack_in : STD_LOGIC;
    signal b_V_1_ack_in : STD_LOGIC;
    signal c_V_1_ack_in : STD_LOGIC;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal incr_V : STD_LOGIC_VECTOR (31 downto 0);
    signal mod_V : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_V_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal theta_V_1_vld_reg : STD_LOGIC := '0';
    signal theta_V_1_vld_in : STD_LOGIC;
    signal a_V_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal a_V_1_vld_reg : STD_LOGIC := '0';
    signal a_V_1_vld_in : STD_LOGIC;
    signal b_V_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal b_V_1_vld_reg : STD_LOGIC := '0';
    signal b_V_1_vld_in : STD_LOGIC;
    signal c_V_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal c_V_1_vld_reg : STD_LOGIC := '0';
    signal c_V_1_vld_in : STD_LOGIC;
    signal acc_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal phase_lut1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal phase_lut1_ce0 : STD_LOGIC;
    signal phase_lut1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_V_read_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter1_mod_V_read_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_mod_V_read_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_mod_V_read_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal full_adr_V_reg_602 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter1_full_adr_V_reg_602 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter2_full_adr_V_reg_602 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter3_full_adr_V_reg_602 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_look_up_sin_fu_137_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal p_0_reg_610 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_look_up_sin_fu_144_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal p_s_reg_615 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_look_up_sin_fu_151_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal p_1_reg_620 : STD_LOGIC_VECTOR (13 downto 0);
    signal isneg_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_reg_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal newsignbit_reg_642 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_648 : STD_LOGIC_VECTOR (1 downto 0);
    signal isneg_1_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_8_reg_660 : STD_LOGIC_VECTOR (15 downto 0);
    signal newsignbit_1_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_672 : STD_LOGIC_VECTOR (1 downto 0);
    signal isneg_2_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_9_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal newsignbit_2_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_696 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_475_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_558_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal grp_look_up_sin_fu_137_ap_start : STD_LOGIC;
    signal grp_look_up_sin_fu_137_ap_done : STD_LOGIC;
    signal grp_look_up_sin_fu_137_ap_idle : STD_LOGIC;
    signal grp_look_up_sin_fu_137_ap_ready : STD_LOGIC;
    signal grp_look_up_sin_fu_137_ap_ce : STD_LOGIC;
    signal grp_look_up_sin_fu_144_ap_start : STD_LOGIC;
    signal grp_look_up_sin_fu_144_ap_done : STD_LOGIC;
    signal grp_look_up_sin_fu_144_ap_idle : STD_LOGIC;
    signal grp_look_up_sin_fu_144_ap_ready : STD_LOGIC;
    signal grp_look_up_sin_fu_144_ap_ce : STD_LOGIC;
    signal grp_look_up_sin_fu_144_full_adr_V : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_look_up_sin_fu_151_ap_start : STD_LOGIC;
    signal grp_look_up_sin_fu_151_ap_done : STD_LOGIC;
    signal grp_look_up_sin_fu_151_ap_idle : STD_LOGIC;
    signal grp_look_up_sin_fu_151_ap_ready : STD_LOGIC;
    signal grp_look_up_sin_fu_151_ap_ce : STD_LOGIC;
    signal grp_look_up_sin_fu_151_full_adr_V : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_grp_look_up_sin_fu_137_ap_start : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ap_reg_grp_look_up_sin_fu_144_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_look_up_sin_fu_151_ap_start : STD_LOGIC := '0';
    signal tmp_6_cast_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal tmp_5_cast_fu_196_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_199_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_2_fu_567_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_4_fu_577_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_6_fu_587_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_not_i_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_mux_fu_378_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_fu_385_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_not_i1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i1_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_not_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge8_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_mux_fu_461_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_468_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_not_i2_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i2_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i2_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i2_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_not_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_mux_fu_544_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_fu_551_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_567_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP1_V_cast_fu_210_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_4_fu_577_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_587_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component look_up_sin IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        full_adr_V : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component phase_generator_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component phase_generator_pcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component phase_generator_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        incr_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        mod_V : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    phase_lut1_U : component phase_generator_pcud
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => phase_lut1_address0,
        ce0 => phase_lut1_ce0,
        q0 => phase_lut1_q0);

    phase_generator_AXILiteS_s_axi_U : component phase_generator_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        incr_V => incr_V,
        mod_V => mod_V);

    grp_look_up_sin_fu_137 : component look_up_sin
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_look_up_sin_fu_137_ap_start,
        ap_done => grp_look_up_sin_fu_137_ap_done,
        ap_idle => grp_look_up_sin_fu_137_ap_idle,
        ap_ready => grp_look_up_sin_fu_137_ap_ready,
        ap_ce => grp_look_up_sin_fu_137_ap_ce,
        full_adr_V => full_adr_V_reg_602,
        ap_return => grp_look_up_sin_fu_137_ap_return);

    grp_look_up_sin_fu_144 : component look_up_sin
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_look_up_sin_fu_144_ap_start,
        ap_done => grp_look_up_sin_fu_144_ap_done,
        ap_idle => grp_look_up_sin_fu_144_ap_idle,
        ap_ready => grp_look_up_sin_fu_144_ap_ready,
        ap_ce => grp_look_up_sin_fu_144_ap_ce,
        full_adr_V => grp_look_up_sin_fu_144_full_adr_V,
        ap_return => grp_look_up_sin_fu_144_ap_return);

    grp_look_up_sin_fu_151 : component look_up_sin
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_look_up_sin_fu_151_ap_start,
        ap_done => grp_look_up_sin_fu_151_ap_done,
        ap_idle => grp_look_up_sin_fu_151_ap_idle,
        ap_ready => grp_look_up_sin_fu_151_ap_ready,
        ap_ce => grp_look_up_sin_fu_151_ap_ce,
        full_adr_V => grp_look_up_sin_fu_151_full_adr_V,
        ap_return => grp_look_up_sin_fu_151_ap_return);

    phase_generator_mdEe_U2 : component phase_generator_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => p_0_reg_610,
        din1 => p_Val2_2_fu_567_p1,
        dout => p_Val2_2_fu_567_p2);

    phase_generator_mdEe_U3 : component phase_generator_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => p_s_reg_615,
        din1 => p_Val2_4_fu_577_p1,
        dout => p_Val2_4_fu_577_p2);

    phase_generator_mdEe_U4 : component phase_generator_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => p_1_reg_620,
        din1 => p_Val2_6_fu_587_p1,
        dout => p_Val2_6_fu_587_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_look_up_sin_fu_137_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_look_up_sin_fu_137_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_reg_grp_look_up_sin_fu_137_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_look_up_sin_fu_137_ap_ready)) then 
                    ap_reg_grp_look_up_sin_fu_137_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_look_up_sin_fu_144_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_look_up_sin_fu_144_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_reg_grp_look_up_sin_fu_144_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_look_up_sin_fu_144_ap_ready)) then 
                    ap_reg_grp_look_up_sin_fu_144_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_look_up_sin_fu_151_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_look_up_sin_fu_151_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                    ap_reg_grp_look_up_sin_fu_151_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_look_up_sin_fu_151_ap_ready)) then 
                    ap_reg_grp_look_up_sin_fu_151_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    b_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    theta_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = a_V_1_vld_in) and (ap_const_logic_0 = a_V_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = a_V_1_vld_in) and (ap_const_logic_1 = a_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                a_V_1_data_reg <= tmp_3_fu_392_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                acc_V <= p_Val2_1_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_full_adr_V_reg_602 <= full_adr_V_reg_602;
                ap_reg_pp0_iter1_mod_V_read_reg_597 <= mod_V_read_reg_597;
                full_adr_V_reg_602 <= p_Val2_1_fu_162_p2(31 downto 20);
                mod_V_read_reg_597 <= mod_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter2_full_adr_V_reg_602 <= ap_reg_pp0_iter1_full_adr_V_reg_602;
                ap_reg_pp0_iter2_mod_V_read_reg_597 <= ap_reg_pp0_iter1_mod_V_read_reg_597;
                ap_reg_pp0_iter3_full_adr_V_reg_602 <= ap_reg_pp0_iter2_full_adr_V_reg_602;
                ap_reg_pp0_iter3_mod_V_read_reg_597 <= ap_reg_pp0_iter2_mod_V_read_reg_597;
                isneg_1_reg_654 <= p_Val2_4_fu_577_p2(29 downto 29);
                isneg_2_reg_678 <= p_Val2_6_fu_587_p2(29 downto 29);
                isneg_reg_630 <= p_Val2_2_fu_567_p2(29 downto 29);
                newsignbit_1_reg_666 <= p_Val2_4_fu_577_p2(27 downto 27);
                newsignbit_2_reg_690 <= p_Val2_6_fu_587_p2(27 downto 27);
                newsignbit_reg_642 <= p_Val2_2_fu_567_p2(27 downto 27);
                p_0_reg_610 <= grp_look_up_sin_fu_137_ap_return;
                p_1_reg_620 <= grp_look_up_sin_fu_151_ap_return;
                p_Val2_3_reg_636 <= p_Val2_2_fu_567_p2(27 downto 12);
                p_Val2_5_8_reg_660 <= p_Val2_4_fu_577_p2(27 downto 12);
                p_Val2_7_9_reg_684 <= p_Val2_6_fu_587_p2(27 downto 12);
                p_s_reg_615 <= grp_look_up_sin_fu_144_ap_return;
                tmp_10_reg_672 <= p_Val2_4_fu_577_p2(29 downto 28);
                tmp_13_reg_696 <= p_Val2_6_fu_587_p2(29 downto 28);
                tmp_reg_648 <= p_Val2_2_fu_567_p2(29 downto 28);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = b_V_1_vld_in) and (ap_const_logic_0 = b_V_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = b_V_1_vld_in) and (ap_const_logic_1 = b_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                b_V_1_data_reg <= tmp_4_fu_475_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = c_V_1_vld_in) and (ap_const_logic_0 = c_V_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = c_V_1_vld_in) and (ap_const_logic_1 = c_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                c_V_1_data_reg <= tmp_5_fu_558_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = theta_V_1_vld_in) and (ap_const_logic_0 = theta_V_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) and (ap_const_logic_1 = theta_V_1_vld_in) and (ap_const_logic_1 = theta_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                theta_V_1_data_reg <= phase_lut1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
        OP1_V_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter3_mod_V_read_reg_597),30));

    a_V <= a_V_1_data_reg;

    a_V_1_ack_in_assign_proc : process(a_V_1_vld_reg)
    begin
        if (((ap_const_logic_0 = a_V_1_vld_reg) or ((ap_const_logic_1 = a_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            a_V_1_ack_in <= ap_const_logic_1;
        else 
            a_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    a_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            a_V_1_vld_in <= ap_const_logic_1;
        else 
            a_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, theta_V_1_ack_in, a_V_1_ack_in, b_V_1_ack_in, c_V_1_ack_in)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start)) or (((ap_const_logic_0 = theta_V_1_ack_in) or (ap_const_logic_0 = a_V_1_ack_in) or (ap_const_logic_0 = b_V_1_ack_in) or (ap_const_logic_0 = c_V_1_ack_in)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, theta_V_1_ack_in, a_V_1_ack_in, b_V_1_ack_in, c_V_1_ack_in)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start)) or (((ap_const_logic_0 = theta_V_1_ack_in) or (ap_const_logic_0 = a_V_1_ack_in) or (ap_const_logic_0 = b_V_1_ack_in) or (ap_const_logic_0 = c_V_1_ack_in)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_start, ap_enable_reg_pp0_iter6, theta_V_1_ack_in, a_V_1_ack_in, b_V_1_ack_in, c_V_1_ack_in)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start)) or (((ap_const_logic_0 = theta_V_1_ack_in) or (ap_const_logic_0 = a_V_1_ack_in) or (ap_const_logic_0 = b_V_1_ack_in) or (ap_const_logic_0 = c_V_1_ack_in)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_const_logic_0 = ap_start);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(theta_V_1_ack_in, a_V_1_ack_in, b_V_1_ack_in, c_V_1_ack_in)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((ap_const_logic_0 = theta_V_1_ack_in) or (ap_const_logic_0 = a_V_1_ack_in) or (ap_const_logic_0 = b_V_1_ack_in) or (ap_const_logic_0 = c_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to5))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_V <= b_V_1_data_reg;

    b_V_1_ack_in_assign_proc : process(b_V_1_vld_reg)
    begin
        if (((ap_const_logic_0 = b_V_1_vld_reg) or ((ap_const_logic_1 = b_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            b_V_1_ack_in <= ap_const_logic_1;
        else 
            b_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    b_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            b_V_1_vld_in <= ap_const_logic_1;
        else 
            b_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    brmerge39_i1_fu_432_p2 <= (p_not38_i1_fu_427_p2 or newsignbit_0_not_i1_fu_422_p2);
    brmerge39_i2_fu_515_p2 <= (p_not38_i2_fu_510_p2 or newsignbit_0_not_i2_fu_505_p2);
    brmerge39_i_fu_349_p2 <= (p_not38_i_fu_344_p2 or newsignbit_0_not_i_fu_339_p2);
    brmerge8_fu_455_p2 <= (overflow_1_fu_416_p2 or underflow_1_not_fu_449_p2);
    brmerge9_fu_538_p2 <= (overflow_2_fu_499_p2 or underflow_2_not_fu_532_p2);
    brmerge_fu_372_p2 <= (overflow_fu_333_p2 or underflow_not_fu_366_p2);
    brmerge_i1_fu_406_p2 <= (newsignbit_1_reg_666 or p_not_i1_fu_401_p2);
    brmerge_i2_fu_489_p2 <= (newsignbit_2_reg_690 or p_not_i2_fu_484_p2);
    brmerge_i_fu_323_p2 <= (newsignbit_reg_642 or p_not_i_fu_318_p2);
    brmerge_i_i1_fu_443_p2 <= (underflow_1_fu_438_p2 or overflow_1_fu_416_p2);
    brmerge_i_i2_fu_526_p2 <= (underflow_2_fu_521_p2 or overflow_2_fu_499_p2);
    brmerge_i_i_fu_360_p2 <= (underflow_fu_355_p2 or overflow_fu_333_p2);
    c_V <= c_V_1_data_reg;

    c_V_1_ack_in_assign_proc : process(c_V_1_vld_reg)
    begin
        if (((ap_const_logic_0 = c_V_1_vld_reg) or ((ap_const_logic_1 = c_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            c_V_1_ack_in <= ap_const_logic_1;
        else 
            c_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    c_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            c_V_1_vld_in <= ap_const_logic_1;
        else 
            c_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    grp_look_up_sin_fu_137_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_look_up_sin_fu_137_ap_ce <= ap_const_logic_1;
        else 
            grp_look_up_sin_fu_137_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_look_up_sin_fu_137_ap_start <= ap_reg_grp_look_up_sin_fu_137_ap_start;

    grp_look_up_sin_fu_144_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_look_up_sin_fu_144_ap_ce <= ap_const_logic_1;
        else 
            grp_look_up_sin_fu_144_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_look_up_sin_fu_144_ap_start <= ap_reg_grp_look_up_sin_fu_144_ap_start;
    grp_look_up_sin_fu_144_full_adr_V <= std_logic_vector(unsigned(full_adr_V_reg_602) + unsigned(ap_const_lv12_AAA));

    grp_look_up_sin_fu_151_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_look_up_sin_fu_151_ap_ce <= ap_const_logic_1;
        else 
            grp_look_up_sin_fu_151_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_look_up_sin_fu_151_ap_start <= ap_reg_grp_look_up_sin_fu_151_ap_start;
    grp_look_up_sin_fu_151_full_adr_V <= std_logic_vector(unsigned(full_adr_V_reg_602) + unsigned(ap_const_lv12_555));
    newsignbit_0_not_i1_fu_422_p2 <= (newsignbit_1_reg_666 xor ap_const_lv1_1);
    newsignbit_0_not_i2_fu_505_p2 <= (newsignbit_2_reg_690 xor ap_const_lv1_1);
    newsignbit_0_not_i_fu_339_p2 <= (newsignbit_reg_642 xor ap_const_lv1_1);
    overflow_1_fu_416_p2 <= (brmerge_i1_fu_406_p2 and tmp_1_fu_411_p2);
    overflow_2_fu_499_p2 <= (brmerge_i2_fu_489_p2 and tmp_8_fu_494_p2);
    overflow_fu_333_p2 <= (brmerge_i_fu_323_p2 and tmp_2_fu_328_p2);
    p_Val2_1_fu_162_p2 <= std_logic_vector(unsigned(incr_V) + unsigned(acc_V));
    p_Val2_2_fu_567_p1 <= OP1_V_cast_fu_210_p1(16 - 1 downto 0);
    p_Val2_4_fu_577_p1 <= OP1_V_cast_fu_210_p1(16 - 1 downto 0);
    p_Val2_5_fu_385_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_355_p2(0) = '1') else 
        p_Val2_3_reg_636;
    p_Val2_5_mux_fu_378_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i_fu_360_p2(0) = '1') else 
        p_Val2_3_reg_636;
    p_Val2_6_fu_587_p1 <= OP1_V_cast_fu_210_p1(16 - 1 downto 0);
    p_Val2_7_fu_468_p3 <= 
        ap_const_lv16_8000 when (underflow_1_fu_438_p2(0) = '1') else 
        p_Val2_5_8_reg_660;
    p_Val2_7_mux_fu_461_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i1_fu_443_p2(0) = '1') else 
        p_Val2_5_8_reg_660;
    p_Val2_9_fu_551_p3 <= 
        ap_const_lv16_8000 when (underflow_2_fu_521_p2(0) = '1') else 
        p_Val2_7_9_reg_684;
    p_Val2_9_mux_fu_544_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i2_fu_526_p2(0) = '1') else 
        p_Val2_7_9_reg_684;
    p_not38_i1_fu_427_p2 <= "0" when (tmp_10_reg_672 = ap_const_lv2_3) else "1";
    p_not38_i2_fu_510_p2 <= "0" when (tmp_13_reg_696 = ap_const_lv2_3) else "1";
    p_not38_i_fu_344_p2 <= "0" when (tmp_reg_648 = ap_const_lv2_3) else "1";
    p_not_i1_fu_401_p2 <= "0" when (tmp_10_reg_672 = ap_const_lv2_0) else "1";
    p_not_i2_fu_484_p2 <= "0" when (tmp_13_reg_696 = ap_const_lv2_0) else "1";
    p_not_i_fu_318_p2 <= "0" when (tmp_reg_648 = ap_const_lv2_0) else "1";
    phase_lut1_address0 <= tmp_6_cast_fu_205_p1(12 - 1 downto 0);

    phase_lut1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            phase_lut1_ce0 <= ap_const_logic_1;
        else 
            phase_lut1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    theta_V <= theta_V_1_data_reg;

    theta_V_1_ack_in_assign_proc : process(theta_V_1_vld_reg)
    begin
        if (((ap_const_logic_0 = theta_V_1_vld_reg) or ((ap_const_logic_1 = theta_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            theta_V_1_ack_in <= ap_const_logic_1;
        else 
            theta_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5))) then 
            theta_V_1_vld_in <= ap_const_logic_1;
        else 
            theta_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_411_p2 <= (isneg_1_reg_654 xor ap_const_lv1_1);
    tmp_2_fu_328_p2 <= (isneg_reg_630 xor ap_const_lv1_1);
    tmp_3_fu_392_p3 <= 
        p_Val2_5_mux_fu_378_p3 when (brmerge_fu_372_p2(0) = '1') else 
        p_Val2_5_fu_385_p3;
    tmp_4_fu_475_p3 <= 
        p_Val2_7_mux_fu_461_p3 when (brmerge8_fu_455_p2(0) = '1') else 
        p_Val2_7_fu_468_p3;
    tmp_5_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter3_full_adr_V_reg_602),13));
    tmp_5_fu_558_p3 <= 
        p_Val2_9_mux_fu_544_p3 when (brmerge9_fu_538_p2(0) = '1') else 
        p_Val2_9_fu_551_p3;
    tmp_6_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_199_p2),32));
    tmp_6_fu_199_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_196_p1) + unsigned(ap_const_lv13_400));
    tmp_8_fu_494_p2 <= (isneg_2_reg_678 xor ap_const_lv1_1);
    underflow_1_fu_438_p2 <= (brmerge39_i1_fu_432_p2 and isneg_1_reg_654);
    underflow_1_not_fu_449_p2 <= (underflow_1_fu_438_p2 xor ap_const_lv1_1);
    underflow_2_fu_521_p2 <= (brmerge39_i2_fu_515_p2 and isneg_2_reg_678);
    underflow_2_not_fu_532_p2 <= (underflow_2_fu_521_p2 xor ap_const_lv1_1);
    underflow_fu_355_p2 <= (brmerge39_i_fu_349_p2 and isneg_reg_630);
    underflow_not_fu_366_p2 <= (underflow_fu_355_p2 xor ap_const_lv1_1);
end behav;
