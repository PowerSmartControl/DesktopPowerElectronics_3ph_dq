-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pll_int is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (15 downto 0);
    w_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    theta_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of pll_int is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pll_int,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.601000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=948,HLS_SYN_LUT=778}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_CDBC : STD_LOGIC_VECTOR (15 downto 0) := "1100110110111100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_3244 : STD_LOGIC_VECTOR (15 downto 0) := "0011001001000100";
    constant ap_const_lv17_19B78 : STD_LOGIC_VECTOR (16 downto 0) := "11001101101111000";
    constant ap_const_lv16_9B78 : STD_LOGIC_VECTOR (15 downto 0) := "1001101101111000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rstIntN_V : STD_LOGIC_VECTOR (0 downto 0);
    signal Ki_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kp_V : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal w_V_1_vld_reg : STD_LOGIC := '0';
    signal w_V_1_vld_in : STD_LOGIC;
    signal w_V_1_ack_in : STD_LOGIC;
    signal theta_V_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal theta_V_1_vld_reg : STD_LOGIC := '0';
    signal theta_V_1_vld_in : STD_LOGIC;
    signal theta_V_1_ack_in : STD_LOGIC;
    signal guard_variable_for_p : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal w_integral_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal y_integral_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal rstIntN_V_read_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_4_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_4_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_Val2_1_fu_214_p2 : signal is "no";
    signal p_Val2_1_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal signbit_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_978 : STD_LOGIC_VECTOR (15 downto 0);
    signal newsignbit_fu_254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i1_reg_1014 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_7_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_1_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_1_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1039 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_6_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of p_Val2_6_fu_441_p2 : signal is "no";
    signal p_Val2_6_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal signbit_1_reg_1049 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_1055 : STD_LOGIC_VECTOR (15 downto 0);
    signal newsignbit_1_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_1_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_1079 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_14_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_mux_fu_622_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_mux_reg_1111 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_5_fu_644_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_13_fu_734_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_13_reg_1121 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_16_fu_836_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_16_reg_1129 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal isneg_2_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_911_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_10_reg_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal guard_variable_for_p_load_fu_151_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_195_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_202_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_cast_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_fu_227_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_274_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_290_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_demorgan_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_not_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_mux_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_430_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_12_cast_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_464_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_454_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_501_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_517_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_32_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i2_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_1_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_demorgan_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_not_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_638_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_656_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_fu_652_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_11_fu_660_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_12_fu_674_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal newsignbit_2_fu_680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_not_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge3_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_13_mux_fu_718_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_6_fu_726_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_747_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_14_fu_750_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal newsignbit_3_fu_769_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_not_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_764_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal underflow_3_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_7_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal brmerge4_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_17_mux_fu_807_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp1_fu_823_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_not_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i5_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_17_fu_866_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal underflow_4_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_19_mux_fu_895_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_8_fu_903_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_920_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal OP2_V_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_4_fu_927_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component pll_int_mul_mul_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pll_int_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rstIntN_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        Ki_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kp_V : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    pll_int_AXILiteS_s_axi_U : component pll_int_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rstIntN_V => rstIntN_V,
        Ki_V => Ki_V,
        Kp_V => Kp_V);

    pll_int_mul_mul_1bkb_U0 : component pll_int_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => Ki_V,
        din1 => p_Val2_s_fu_920_p1,
        dout => p_Val2_s_fu_920_p2);

    pll_int_mul_mul_1bkb_U1 : component pll_int_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => Kp_V,
        din1 => p_Val2_4_4_fu_927_p1,
        dout => p_Val2_4_4_fu_927_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Val2_10_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((guard_variable_for_p_load_fu_151_p1 = ap_const_lv1_1)) then 
                    p_Val2_10_reg_140 <= w_integral_V;
                elsif ((ap_const_lv1_0 = guard_variable_for_p_load_fu_151_p1)) then 
                    p_Val2_10_reg_140 <= ap_const_lv16_CDBC;
                end if;
            end if; 
        end if;
    end process;

    theta_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    w_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Range1_all_ones_1_reg_1079 <= Range1_all_ones_1_fu_527_p2;
                Range1_all_zeros_1_reg_1086 <= Range1_all_zeros_1_fu_533_p2;
                Range2_all_ones_1_reg_1074 <= Range2_all_ones_1_fu_511_p2;
                carry_1_reg_1067 <= carry_1_fu_495_p2;
                newsignbit_1_reg_1061 <= p_Val2_8_fu_475_p2(15 downto 15);
                p_Val2_6_reg_1044 <= p_Val2_6_fu_441_p2;
                p_Val2_8_reg_1055 <= p_Val2_8_fu_475_p2;
                signbit_1_reg_1049 <= p_Val2_6_fu_441_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Range1_all_ones_reg_1002 <= Range1_all_ones_fu_300_p2;
                Range1_all_zeros_reg_1009 <= Range1_all_zeros_fu_306_p2;
                Range2_all_ones_reg_997 <= Range2_all_ones_fu_284_p2;
                carry_reg_990 <= carry_fu_268_p2;
                newsignbit_reg_984 <= p_Val2_3_fu_248_p2(15 downto 15);
                p_Val2_1_reg_967 <= p_Val2_1_fu_214_p2;
                p_Val2_3_reg_978 <= p_Val2_3_fu_248_p2;
                signbit_reg_972 <= p_Val2_1_fu_214_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                brmerge40_demorgan_i_1_reg_1024 <= brmerge40_demorgan_i_1_fu_367_p2;
                brmerge_i_i1_reg_1034 <= brmerge_i_i1_fu_389_p2;
                p_38_i1_reg_1014 <= p_38_i1_fu_341_p2;
                tmp_7_reg_1019 <= tmp_7_fu_356_p2;
                underflow_reg_1029 <= underflow_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                brmerge40_demorgan_i_reg_1101 <= brmerge40_demorgan_i_fu_594_p2;
                p_38_i_reg_1091 <= p_38_i_fu_568_p2;
                p_Val2_9_mux_reg_1111 <= p_Val2_9_mux_fu_622_p3;
                tmp_14_reg_1096 <= tmp_14_fu_583_p2;
                underflow_1_reg_1106 <= underflow_1_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = guard_variable_for_p_load_fu_151_p1))) then
                guard_variable_for_p <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                isneg_2_reg_1134 <= p_Val2_16_fu_836_p3(15 downto 15);
                p_Val2_16_reg_1129 <= p_Val2_16_fu_836_p3;
                tmp_39_reg_1141 <= p_Val2_16_fu_836_p3(14 downto 14);
                w_integral_V <= p_Val2_16_fu_836_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_13_reg_1121 <= p_Val2_13_fu_734_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                p_Val2_4_4_reg_957 <= p_Val2_4_4_fu_927_p2;
                p_Val2_s_reg_947 <= p_Val2_s_fu_920_p2;
                rstIntN_V_read_reg_934 <= rstIntN_V;
                tmp_24_reg_952 <= p_Val2_s_fu_920_p2(11 downto 11);
                tmp_29_reg_962 <= p_Val2_4_4_fu_927_p2(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_5_reg_1039 <= p_Val2_5_fu_416_p3;
                y_integral_V <= p_Val2_5_fu_416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = theta_V_1_vld_in) and (ap_const_logic_0 = theta_V_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = theta_V_1_vld_in) and (ap_const_logic_1 = theta_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                theta_V_1_data_reg <= tmp_22_fu_911_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = w_V_1_vld_in) and (ap_const_logic_0 = w_V_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = w_V_1_vld_in) and (ap_const_logic_1 = w_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                w_V_1_data_reg <= p_Val2_9_5_fu_644_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, w_V_1_ack_in, theta_V_1_ack_in, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = w_V_1_ack_in) or (ap_const_logic_0 = theta_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
        OP2_V_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_V),32));

    Range1_all_ones_1_fu_527_p2 <= "1" when (tmp_12_fu_517_p4 = ap_const_lv4_F) else "0";
    Range1_all_ones_fu_300_p2 <= "1" when (tmp_6_fu_290_p4 = ap_const_lv4_F) else "0";
    Range1_all_zeros_1_fu_533_p2 <= "1" when (tmp_12_fu_517_p4 = ap_const_lv4_0) else "0";
    Range1_all_zeros_fu_306_p2 <= "1" when (tmp_6_fu_290_p4 = ap_const_lv4_0) else "0";
    Range2_all_ones_1_fu_511_p2 <= "1" when (tmp_11_fu_501_p4 = ap_const_lv3_7) else "0";
    Range2_all_ones_fu_284_p2 <= "1" when (tmp_3_fu_274_p4 = ap_const_lv3_7) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_assign_proc : process(w_V_1_ack_in, theta_V_1_ack_in)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = w_V_1_ack_in) or (ap_const_logic_0 = theta_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(w_V_1_ack_in, theta_V_1_ack_in, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = w_V_1_ack_in) or (ap_const_logic_0 = theta_V_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(w_V_1_ack_in, theta_V_1_ack_in, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = w_V_1_ack_in) or (ap_const_logic_0 = theta_V_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    brmerge3_fu_712_p2 <= (newsignbit_2_fu_680_p3 or isneg_1_not_fu_706_p2);
    brmerge40_demorgan_i_1_fu_367_p2 <= (newsignbit_reg_984 and deleted_ones_fu_335_p3);
    brmerge40_demorgan_i_fu_594_p2 <= (newsignbit_1_reg_1061 and deleted_ones_1_fu_562_p3);
    brmerge4_fu_801_p2 <= (newsignbit_3_fu_769_p3 or isneg_2_not_fu_795_p2);
    brmerge5_fu_890_p2 <= (tmp_39_reg_1141 or p_Result_25_not_fu_885_p2);
    brmerge_i1_fu_351_p2 <= (newsignbit_reg_984 or p_not_i1_fu_345_p2);
    brmerge_i2_fu_578_p2 <= (newsignbit_1_reg_1061 or p_not_i_fu_572_p2);
    brmerge_i_i1_fu_389_p2 <= (underflow_fu_384_p2 or overflow_fu_361_p2);
    brmerge_i_i2_fu_616_p2 <= (underflow_1_fu_611_p2 or overflow_1_fu_588_p2);
    brmerge_i_i3_fu_700_p2 <= (isneg_fu_666_p3 xor newsignbit_2_fu_680_p3);
    brmerge_i_i4_fu_789_p2 <= (isneg_1_fu_756_p3 xor newsignbit_3_fu_769_p3);
    brmerge_i_i5_fu_881_p2 <= (isneg_2_reg_1134 xor tmp_39_reg_1141);
    carry_1_fu_495_p2 <= (tmp_30_fu_467_p3 and tmp_10_fu_489_p2);
    carry_fu_268_p2 <= (tmp_25_fu_240_p3 and tmp_4_fu_262_p2);
    deleted_ones_1_fu_562_p3 <= 
        p_41_i_fu_557_p2 when (carry_1_reg_1067(0) = '1') else 
        Range1_all_ones_1_reg_1079;
    deleted_ones_fu_335_p3 <= 
        p_41_i1_fu_330_p2 when (carry_reg_990(0) = '1') else 
        Range1_all_ones_reg_1002;
    deleted_zeros_1_fu_546_p3 <= 
        Range1_all_ones_1_reg_1079 when (carry_1_reg_1067(0) = '1') else 
        Range1_all_zeros_1_reg_1086;
    deleted_zeros_fu_319_p3 <= 
        Range1_all_ones_reg_1002 when (carry_reg_990(0) = '1') else 
        Range1_all_zeros_reg_1009;
    guard_variable_for_p_load_fu_151_p1 <= guard_variable_for_p;
    isneg_1_fu_756_p3 <= p_Val2_14_fu_750_p2(16 downto 16);
    isneg_1_not_fu_706_p2 <= (isneg_fu_666_p3 xor ap_const_lv1_1);
    isneg_2_not_fu_795_p2 <= (isneg_1_fu_756_p3 xor ap_const_lv1_1);
    isneg_fu_666_p3 <= p_Val2_11_fu_660_p2(16 downto 16);
    newsignbit_1_fu_481_p3 <= p_Val2_8_fu_475_p2(15 downto 15);
    newsignbit_2_fu_680_p3 <= p_Val2_12_fu_674_p2(15 downto 15);
    newsignbit_3_fu_769_p3 <= p_Val2_14_fu_750_p2(15 downto 15);
    newsignbit_fu_254_p3 <= p_Val2_3_fu_248_p2(15 downto 15);
    overflow_1_fu_588_p2 <= (brmerge_i2_fu_578_p2 and tmp_14_fu_583_p2);
    overflow_fu_361_p2 <= (brmerge_i1_fu_351_p2 and tmp_7_fu_356_p2);
    p_38_i1_fu_341_p2 <= (carry_reg_990 and Range1_all_ones_reg_1002);
    p_38_i_fu_568_p2 <= (carry_1_reg_1067 and Range1_all_ones_1_reg_1079);
    p_41_i1_fu_330_p2 <= (Range2_all_ones_reg_997 and tmp_5_fu_324_p2);
    p_41_i_fu_557_p2 <= (Range2_all_ones_1_reg_1074 and tmp_13_fu_551_p2);
    p_Result_25_not_fu_885_p2 <= (isneg_2_reg_1134 xor ap_const_lv1_1);
    p_Val2_11_fu_660_p2 <= std_logic_vector(signed(tmp_16_fu_656_p1) + signed(tmp_15_fu_652_p1));
    p_Val2_12_fu_674_p2 <= std_logic_vector(unsigned(p_Val2_10_reg_140) + unsigned(p_Val2_9_5_fu_644_p3));
    p_Val2_13_fu_734_p3 <= 
        p_Val2_13_mux_fu_718_p3 when (brmerge3_fu_712_p2(0) = '1') else 
        p_Val2_s_6_fu_726_p3;
    p_Val2_13_mux_fu_718_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i3_fu_700_p2(0) = '1') else 
        p_Val2_12_fu_674_p2;
    p_Val2_14_fu_750_p2 <= std_logic_vector(signed(ap_const_lv17_19B78) + signed(tmp_19_fu_747_p1));
    p_Val2_15_fu_764_p2 <= std_logic_vector(signed(ap_const_lv16_9B78) + signed(p_Val2_13_reg_1121));
    p_Val2_16_fu_836_p3 <= 
        p_Val2_17_mux_fu_807_p3 when (sel_tmp2_fu_830_p2(0) = '1') else 
        sel_tmp1_fu_823_p3;
    p_Val2_17_fu_866_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_16_reg_1129),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    p_Val2_17_mux_fu_807_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i4_fu_789_p2(0) = '1') else 
        p_Val2_15_fu_764_p2;
    p_Val2_19_mux_fu_895_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i5_fu_881_p2(0) = '1') else 
        p_Val2_17_fu_866_p2;
    p_Val2_1_7_fu_815_p3 <= 
        ap_const_lv16_8000 when (underflow_3_fu_783_p2(0) = '1') else 
        p_Val2_15_fu_764_p2;
    p_Val2_1_fu_214_p2 <= std_logic_vector(signed(p_Val2_s_reg_947) + signed(tmp_cast_fu_210_p1));
    p_Val2_2_8_fu_903_p3 <= 
        ap_const_lv16_8000 when (underflow_4_fu_876_p2(0) = '1') else 
        p_Val2_17_fu_866_p2;
    p_Val2_2_fu_227_p4 <= p_Val2_1_fu_214_p2(27 downto 12);
    p_Val2_3_fu_248_p2 <= std_logic_vector(unsigned(tmp_2_fu_237_p1) + unsigned(p_Val2_2_fu_227_p4));
    p_Val2_4_4_fu_927_p1 <= OP2_V_fu_169_p1(16 - 1 downto 0);
    p_Val2_4_fu_410_p3 <= 
        ap_const_lv16_8000 when (underflow_reg_1029(0) = '1') else 
        p_Val2_3_reg_978;
    p_Val2_4_mux_fu_404_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i1_reg_1034(0) = '1') else 
        p_Val2_3_reg_978;
    p_Val2_5_fu_416_p3 <= 
        p_Val2_4_mux_fu_404_p3 when (underflow_1_not_fu_399_p2(0) = '1') else 
        p_Val2_4_fu_410_p3;
    p_Val2_6_fu_441_p2 <= std_logic_vector(signed(p_Val2_4_4_reg_957) + signed(tmp_12_cast_fu_437_p1));
    p_Val2_7_fu_454_p4 <= p_Val2_6_fu_441_p2(27 downto 12);
    p_Val2_8_fu_475_p2 <= std_logic_vector(unsigned(tmp_9_fu_464_p1) + unsigned(p_Val2_7_fu_454_p4));
    p_Val2_9_5_fu_644_p3 <= 
        p_Val2_9_mux_reg_1111 when (underflow_2_not_fu_633_p2(0) = '1') else 
        p_Val2_9_fu_638_p3;
    p_Val2_9_fu_638_p3 <= 
        ap_const_lv16_8000 when (underflow_1_reg_1106(0) = '1') else 
        p_Val2_8_reg_1055;
    p_Val2_9_mux_fu_622_p3 <= 
        ap_const_lv16_7FFF when (brmerge_i_i2_fu_616_p2(0) = '1') else 
        p_Val2_8_reg_1055;
    p_Val2_s_6_fu_726_p3 <= 
        ap_const_lv16_8000 when (underflow_2_fu_694_p2(0) = '1') else 
        p_Val2_12_fu_674_p2;
    p_Val2_s_fu_920_p1 <= OP2_V_fu_169_p1(16 - 1 downto 0);
    p_not_i1_fu_345_p2 <= (deleted_zeros_fu_319_p3 xor ap_const_lv1_1);
    p_not_i_fu_572_p2 <= (deleted_zeros_1_fu_546_p3 xor ap_const_lv1_1);
    sel_tmp1_fu_823_p3 <= 
        p_Val2_1_7_fu_815_p3 when (tmp_18_fu_742_p2(0) = '1') else 
        p_Val2_13_reg_1121;
    sel_tmp2_fu_830_p2 <= (tmp_18_fu_742_p2 and brmerge4_fu_801_p2);
    theta_V <= theta_V_1_data_reg;

    theta_V_1_ack_in_assign_proc : process(theta_V_1_vld_reg)
    begin
        if (((ap_const_logic_0 = theta_V_1_vld_reg) or ((ap_const_logic_1 = theta_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            theta_V_1_ack_in <= ap_const_logic_1;
        else 
            theta_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    theta_V_1_vld_in_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            theta_V_1_vld_in <= ap_const_logic_1;
        else 
            theta_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tmp6_fu_395_p2 <= (brmerge40_demorgan_i_1_reg_1024 or tmp_7_reg_1019);
    tmp7_demorgan_fu_599_p2 <= (p_38_i_fu_568_p2 or brmerge40_demorgan_i_fu_594_p2);
    tmp7_fu_605_p2 <= (tmp7_demorgan_fu_599_p2 xor ap_const_lv1_1);
    tmp8_fu_629_p2 <= (brmerge40_demorgan_i_reg_1101 or tmp_14_reg_1096);
    tmp_10_fu_489_p2 <= (newsignbit_1_fu_481_p3 xor ap_const_lv1_1);
    tmp_11_fu_501_p4 <= p_Val2_6_fu_441_p2(31 downto 29);
        tmp_12_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_430_p3),32));

    tmp_12_fu_517_p4 <= p_Val2_6_fu_441_p2(31 downto 28);
    tmp_13_fu_551_p2 <= (tmp_32_fu_539_p3 xor ap_const_lv1_1);
    tmp_14_fu_583_p2 <= (signbit_1_reg_1049 xor ap_const_lv1_1);
        tmp_15_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_reg_140),17));

        tmp_16_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_9_5_fu_644_p3),17));

    tmp_17_fu_688_p2 <= (newsignbit_2_fu_680_p3 xor ap_const_lv1_1);
    tmp_18_fu_742_p2 <= "1" when (signed(p_Val2_13_reg_1121) > signed(ap_const_lv16_3244)) else "0";
    tmp_19_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_13_reg_1121),17));
    tmp_1_fu_195_p3 <= 
        y_integral_V when (rstIntN_V_read_reg_934(0) = '1') else 
        ap_const_lv16_0;
    tmp_20_fu_777_p2 <= (newsignbit_3_fu_769_p3 xor ap_const_lv1_1);
    tmp_21_fu_871_p2 <= (tmp_39_reg_1141 xor ap_const_lv1_1);
    tmp_22_fu_911_p3 <= 
        p_Val2_19_mux_fu_895_p3 when (brmerge5_fu_890_p2(0) = '1') else 
        p_Val2_2_8_fu_903_p3;
    tmp_25_fu_240_p3 <= p_Val2_1_fu_214_p2(27 downto 27);
    tmp_27_fu_312_p3 <= p_Val2_1_reg_967(28 downto 28);
    tmp_2_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_952),16));
    tmp_30_fu_467_p3 <= p_Val2_6_fu_441_p2(27 downto 27);
    tmp_32_fu_539_p3 <= p_Val2_6_reg_1044(28 downto 28);
    tmp_3_fu_274_p4 <= p_Val2_1_fu_214_p2(31 downto 29);
    tmp_4_fu_262_p2 <= (newsignbit_fu_254_p3 xor ap_const_lv1_1);
    tmp_5_fu_324_p2 <= (tmp_27_fu_312_p3 xor ap_const_lv1_1);
    tmp_6_fu_290_p4 <= p_Val2_1_fu_214_p2(31 downto 28);
    tmp_7_fu_356_p2 <= (signbit_reg_972 xor ap_const_lv1_1);
    tmp_8_fu_430_p3 <= (p_Val2_5_reg_1039 & ap_const_lv12_0);
    tmp_9_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_962),16));
        tmp_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_202_p3),32));

    tmp_demorgan_fu_372_p2 <= (p_38_i1_fu_341_p2 or brmerge40_demorgan_i_1_fu_367_p2);
    tmp_fu_378_p2 <= (tmp_demorgan_fu_372_p2 xor ap_const_lv1_1);
    tmp_s_fu_202_p3 <= (tmp_1_fu_195_p3 & ap_const_lv12_0);
    underflow_1_fu_611_p2 <= (signbit_1_reg_1049 and tmp7_fu_605_p2);
    underflow_1_not_fu_399_p2 <= (tmp6_fu_395_p2 or p_38_i1_reg_1014);
    underflow_2_fu_694_p2 <= (isneg_fu_666_p3 and tmp_17_fu_688_p2);
    underflow_2_not_fu_633_p2 <= (tmp8_fu_629_p2 or p_38_i_reg_1091);
    underflow_3_fu_783_p2 <= (isneg_1_fu_756_p3 and tmp_20_fu_777_p2);
    underflow_4_fu_876_p2 <= (isneg_2_reg_1134 and tmp_21_fu_871_p2);
    underflow_fu_384_p2 <= (signbit_reg_972 and tmp_fu_378_p2);
    w_V <= w_V_1_data_reg;

    w_V_1_ack_in_assign_proc : process(w_V_1_vld_reg)
    begin
        if (((ap_const_logic_0 = w_V_1_vld_reg) or ((ap_const_logic_1 = w_V_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            w_V_1_ack_in <= ap_const_logic_1;
        else 
            w_V_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    w_V_1_vld_in_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_V_1_vld_in <= ap_const_logic_1;
        else 
            w_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

end behav;
